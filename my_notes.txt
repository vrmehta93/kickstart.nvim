
Keys
x - delete character
D - equivalent of d$
r - replace character
R - replace motion
c - change (delete motion and insert mode)
s - delete character under cursor and go into insert mode
i/a - insert mode left/right side of block cursor
A - append text at the end of line
p/P - put after/before cursor
o/O - add line after/before cursor and insert mode
u - undo change
U - new change to undo the changes for current line
<c-r> - redo change
:%s/<old>/<new>/gc - substitute command
	- "%" means for the whole file. Replace with "#,#" for line numbers in file
	- without "/gc" - first occurence
	- with only "/g" - all occurences
	- with only "/c" - ask for confirmation each time
	- If you can run this in visual mode, it only affects selected lines
^ - go to first non-blank character

From The Primeagen - https://www.youtube.com/watch?v=uL9oOZStezw&list=PLeZYXXzdoLhxP0fxWnzzZqpof8Cj2SODL&index=4&ab_channel=ThePrimeagen
= - auto indent
	=ap - align entire paragraph
NOTE - I don't like using vim-easymotion because if I have to use another editor, chances are there's a vim plugin for it and you can move around pretty fast with vim default motions
><num><up/down motion> - indent num lines
	e.g. >4j will indent 4 lines
:LspStop - if you don't want to see LSP stuff
<c-a> - increment number
<c-x> - decrement number
Substitute expression s/\(\w.*\)/data[0] = "\1";
	Whatever is within \( and \) can be referenced as a parameter. e.g. \1
	\w - Matches any word character (one character)
	.* - Matches 0 or more characters
g<c-a> after selecting text in visual mode - increments appropriately all selected numbers
	This works even if you select whole lines with text on them
	If you don't include "g", then all increment same number

Motions
w/W - word forward
b/B - word backward
e/E - word forward last character
ge - word backward last character

Navigation
<c-d> - half page down
<c-u> - half page up
<c-f> - page down
<c-b> - page up
'/'/? - forward/backward search
<c-o>/<c-i> - go back/forward to where you were

Other
ggyG - yank whole file

Help Navigation
K - find/goto documentation of word under cursor
:help OR <f1>
<c-w><c-w> - jump between current buffer and help buffer
<c-6> (aka <c-^) - jump to alternate file

Misc
<c-g> - file location and status
% - find matching parenthesis/bracket
:!<command> - execute external command
	e.g. (select bunch of lines in visual mode) > :<,>!sort | unique
	This sorts the lines and only keeps unique values
:r - read external file/command
<c-d> OR <tab> - command completions
Telescope plugin is a fuzzy finder (e.g <leader>sh)
	Telescope keymappings/shortcuts are defined within config function in init.lua
LSP shortcuts defined in nvim-lspconfig plugin in init.lua
	To see LSP's installed (and available) - ":Mason"
	In mason popup, there are shortcuts to install, uninstall, etc. See help menu
Mini.nvim has some useful way of navigating around textobjects

Other helpful notes not included already in kickstarter's init.lua or Tutor
:lua <lua code to execute> - To run lua code
In normal mode
	ZZ - save and quit. Equivalent to :wq
:LspInfo - to see what LSPs are active
File explorer
	:Ex
	:Sex - horizontal split
	:Vex - vertical split
Buffers
	:bnext or :bn
	:bprevious or :bp
	:bdelete or :bd
To run a command in normal mode - :normal <commands> OR :norm
	e.g. :normal iHello or :norm iHello
gf - go to file
gx - go to URL
:set spell spelllang=en_us - Enable spell check
	z= - Place cursor underneath the highlighted word to see suggestions to fix
	zg - Add word to dictionary

